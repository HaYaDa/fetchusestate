{"version":3,"sources":["components/usestaterandom.js","App.js","serviceWorker.js","index.js"],"names":["Usestaterandom","useState","count","setCount","results","setResults","generateData","a","fetch","result","json","genData","console","log","useEffect","onClick","map","v","name","first","last","gender","location","city","state","postcode","email","src","picture","thumbnail","App","className","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAEe,SAASA,IAAkB,IAAD,EACXC,mBAAS,GADE,mBAC9BC,EAD8B,KACvBC,EADuB,OAEPF,mBAAS,IAFF,mBAE9BG,EAF8B,KAErBC,EAFqB,KAI/BC,EAAY,uCAAG,8BAAAC,EAAA,sEACIC,MAAK,6CAAwCN,IADjD,cACXO,EADW,gBAEKA,EAAOC,OAFZ,OAEXC,EAFW,OAGjBC,QAAQC,IAAIF,EAAQP,SASpBC,EAAW,YAAIM,EAAQP,UAZN,2CAAH,qDAelBU,qBAAU,WACNR,MACD,IASH,OACI,6BACI,4BAAQS,QATK,WAClBZ,EAASD,EAAO,GAChBU,QAAQC,IAAIX,GACZI,MAMK,iBACA,+BACI,4BACI,2CACA,yCACA,sCACA,oCACA,qCACA,wCACA,sCACA,mCACA,oCAEHF,EAAQY,KAAI,SAAAC,GAAC,OACV,4BACI,4BAAKA,EAAEC,KAAKC,OACZ,4BAAKF,EAAEC,KAAKE,MACZ,4BAAKH,EAAEI,QACP,4BAAKJ,EAAEK,SAASC,MAChB,4BAAKN,EAAEK,SAASE,OAChB,4BAAKP,EAAEK,SAASG,UAChB,4BAAKR,EAAES,OACP,4BAAI,yBAAKC,IAAKV,EAAEW,QAAQC,aACxB,4BAAI,yBAAKF,IAAKV,EAAEW,QAAQC,mBC7CjCC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC/B,EAAD,QCKcgC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1bac11e9.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react'; \n\nexport default function Usestaterandom() {\n    const [count, setCount] = useState(0); \n    const [results, setResults] = useState([]); \n\n    const generateData = async () => {\n        const result = await fetch (`https://randomuser.me/api/?results=${count}`);\n        const genData = await result.json(); \n        console.log(genData.results); \n        /*genData.results.map(e => {\n         const email = e.email; \n        const gender = e.gender;\n        const name = e.name.first;\n        const city = e.location.city;\n        const state = e.location.state;\n        const postcode = e.location.postcode;}) */\n\n        setResults([...genData.results]); \n    }\n\n    useEffect(() => {\n        generateData();  \n    }, [])\n\n    const handleButton = () =>{\n       setCount(count +1);\n       console.log(count); \n       generateData();  \n       \n    }\n     \n    return (\n        <div>\n            <button onClick={handleButton}>Generate Data</button>\n            <table>\n                <tr>\n                    <th>Firsta-Name</th>\n                    <th>Last-Name</th>\n                    <th>Gender</th>\n                    <th>City</th>\n                    <th>State</th>\n                    <th>Postcode</th>\n                    <th>E-M@il</th>\n                    <th>Pic</th>\n                    <th>Mom</th>\n                </tr>\n                {results.map(v => (\n                    <tr>\n                        <td>{v.name.first}</td>\n                        <td>{v.name.last}</td>\n                        <td>{v.gender}</td>\n                        <td>{v.location.city}</td>\n                        <td>{v.location.state}</td>\n                        <td>{v.location.postcode}</td>\n                        <td>{v.email}</td>\n                        <td><img src={v.picture.thumbnail}/></td>\n                        <td><img src={v.picture.thumbnail}/></td>\n                    </tr>\n                ))}\n            </table>\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Usestaterandom from './components/usestaterandom'; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Usestaterandom ></Usestaterandom>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}